gdalwarp
library(terra)
library(rayshader)
dem <- rast("tiff/olympus_mons_clip.tif")
elev <- matrix(values(dem), nrow = ncol(dem), ncol = nrow(dem))
elev <- t(elev)[, nrow(elev):1]
shaded <- sphere_shade(elev, texture="desert")
shaded <- shaded %>% add_shadow(ray_shade(elev, zscale=200), 0.5)
open3d()
render_snapshot()
rgl::open3d()
plot_3d(shaded, elev, zscale = 200, theta=135, phi=45)
shaded <- shaded %>% add_shadow(ray_shade(elev, zscale=50), 0.5)
plot_3d(shaded, elev, zscale = 50, theta=135, phi=45)
render_snapshot()
library(sf)
data <- sf::st_read("data/kontur_population_US_20231101.gpkg")
install.packages("tigris")
library(tigris)
# Load the states
states <- tigris::states()
glimpse(states)
library(tidyverse)
glimpse(states)
florida <- states |>
filter(NAME == "Florida")
library(ggplot2)
florida |>
ggplot() +
geom_sf()
state_florida <- sf::st_intersection(data, florida)
st_crs(florida)
st_crs(data)
# Filter to Florida
florida <- states |>
filter(NAME == "Florida") |>
st_transform((crs = st_crs(data)))
florida |>
ggplot() +
geom_sf()
state_florida <- sf::st_intersection(data, florida)
args(st_intersection)
# This takes forever to calculate, so lets waste
# some disk space by saving it so that we can reload
# it later on.
save(state_florida, file = "data/state_florida.RData")
# Load the data if needed
load("data/state_florida.RData")
# Convert data to a matrix format for Rayshader
# First, define a bounding box that encompasses the data.
bbox <- st_bbox(st_florida)
# Convert data to a matrix format for Rayshader
# First, define a bounding box that encompasses the data.
bbox <- state_bbox(st_florida)
# Convert data to a matrix format for Rayshader
# First, define a bounding box that encompasses the data.
bbox <- st_bbox(state_florida)
# Then,
st_point(bbox[["xmin"]], bbox[["ymin"]])
# Then,
st_point(c(bbox[["xmin"]], bbox[["ymin"]])
# Then,
st_point(c(bbox[["xmin"]], bbox[["ymin"]])) |>
# Then,
bottom_left <- st_point(c(bbox[["xmin"]], bbox[["ymin"]])) |>
st_sfc(crs = st_crs(data))
bottom_right <- st_point(c(bbox[["xmax"]], bbox[["ymax"]])) |>
st_sfc(crs = st_crs(data))
florida |>
ggplot() +
geom_sf() +
geom_sf(data = bottom_left) +
geom_sf(data = bottom_right, color = "red")
bottom_right <- st_point(c(bbox[["xmax"]], bbox[["ymin"]])) |>
st_sfc(crs = st_crs(data))
# Plot this to check the corners of the bbox
florida |>
ggplot() +
geom_sf() +
geom_sf(data = bottom_left) +
geom_sf(data = bottom_right, color = "red")
width <- st_point(c(bbox[["xmin"]], bbox[["ymax"]])) |>
st_sfc(crs = st_crs(data))
top_left <- st_point(c(bbox[["xmin"]], bbox[["ymax"]])) |>
st_sfc(crs = st_crs(data))
width <- st_point(c(bbox[["xmin"]], bbox[["ymax"]])) |>
st_sfc(crs = st_crs(data))
top_left <- st_point(c(bbox[["xmin"]], bbox[["ymax"]])) |>
st_sfc(crs = st_crs(data))
height <- st_distance(bottom_left, top_left)
if( width > height ) {
w_ratio <- 1
h_ratio <- height / width
} else {
h_ratio <- 1
w_ratio <- width / height
}
if( width > height ) {
w_ratio <- 1
h_ratio <- height / width
} else {
h_ratio <- 1
w_ratio <- width / height
}
w_ratio <- width / height
height <- st_distance(bottom_left, top_left)
width <- st_distance(bottom_left, bottom_right)
top_left <- st_point(c(bbox[["xmin"]], bbox[["ymax"]])) |>
st_sfc(crs = st_crs(data))
height <- st_distance(bottom_left, top_left)
if( width > height ) {
w_ratio <- 1
h_ratio <- height / width
} else {
h_ratio <- 1
w_ratio <- width / height
}
# Convert to raster format to then convert to matrix
size <- 5000
florida_rast <- st_rasterize(state_florida, nx = floor(size * w_ratio), ny = floor(size * h_ratio))
install.packages(c("stars", "MetBrewer", "colorspace"))
library(stars)
library(MetBrewer)
library(colorspace)
florida_rast <- st_rasterize(state_florida, nx = floor(size * w_ratio), ny = floor(size * h_ratio))
matrix <- matrix(florida_rast$population, nrow = floor(size * w_ratio), ncol = floor(size * h_ratio))
c1 <- met.brewer("OKeeffe2")
swatchplot(c1)
texture <- grDevices::colorRampPalette(c1, bias=2)(256)
swatchplot(texture)
# Plot it!
rgl::rgl.close()
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = mat, zscale = 20, solid = FALSE, shadowdepth = 0)
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = matrix, zscale = 20, solid = FALSE, shadowdepth = 0)
matrix |>
height_shade(texture = texture) |>
plot_3d(heightmap = matrix, zscale = 20, solid = FALSE, shadowdepth = 0)
{
start_time <- Sys.time()
cat( crayon::cyan(start_time), "\n")
if(!file.exists(outfile)) {
png::writePNG(matrix(1), target=outfile)
}
render_highquality(
filename = outfile,
interactive = FALSE,
lightdirection = 280,
lightaltitude = c(20, 80),
lightcolor = c(c1[2], "white"),
lightintensity = c(600, 100),
samples = 500,
width = 6000,
height = 6000
)
end_time <- Sys.time()
diff <- end_time - start_time
cat(crayon::cyan(diff), "\n")
}
render_camera(theta = -20, phi = 45, zoom = 0.8)
outfile <- "final_plot.png"
{
start_time <- Sys.time()
cat( crayon::cyan(start_time), "\n")
if(!file.exists(outfile)) {
png::writePNG(matrix(1), target=outfile)
}
render_highquality(
filename = outfile,
interactive = FALSE,
lightdirection = 280,
lightaltitude = c(20, 80),
lightcolor = c(c1[2], "white"),
lightintensity = c(600, 100),
samples = 500,
width = 6000,
height = 6000
)
end_time <- Sys.time()
diff <- end_time - start_time
cat(crayon::cyan(diff), "\n")
}
